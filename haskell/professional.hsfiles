{-# START_FILE {{name}}.cabal #-}
name:                   {{name}}
version:                0.1.0.0
build-type:             Simple
cabal-version:          >=1.10
-- synopsis:
-- description:
-- homepage:
-- license:
-- license-file:
-- author:
-- maintainer:
-- copyright:
-- category:
-- extra-source-files:

library
  default-language:     Haskell2010
  hs-source-dirs:       src
  exposed-modules:      Lib
  ghc-options:          -Wall
                        -Werror
                        -Wmissing-import-lists
                        -Wcompat
                        -Wnoncanonical-monad-instances
                        -Wnoncanonical-monadfail-instances
                        -fdefer-typed-holes
  build-depends:        base >= 4.7 && < 5

executable {{name}}
  default-language:     Haskell2010
  hs-source-dirs:       app
  main-is:              Main.hs
  ghc-options:          -Wall
                        -Werror
                        -Wmissing-import-lists
                        -Wcompat
                        -Wnoncanonical-monad-instances
                        -Wnoncanonical-monadfail-instances
                        -threaded
                        -fdefer-typed-holes
  build-depends:        base
                      , {{name}}

test-suite tests
  default-language:     Haskell2010
  type:                 exitcode-stdio-1.0
  hs-source-dirs:       test
  main-is:              Spec.hs
  ghc-options:          -Wall
                        -Werror
                        -Wmissing-import-lists
                        -Wcompat
                        -Wnoncanonical-monad-instances
                        -Wnoncanonical-monadfail-instances
                        -threaded
                        -fdefer-typed-holes
  build-depends:        base
                      , {{name}}

{-# START_FILE test/Spec.hs #-}
import Lib

main :: IO ()
main = helloWorld

{-# START_FILE src/Lib.hs #-}
module Lib where

helloWorld :: IO ()
helloWorld = putStrLn "hello world"

{-# START_FILE app/Main.hs #-}
import Lib (helloWorld)

main :: IO ()
main = helloWorld
